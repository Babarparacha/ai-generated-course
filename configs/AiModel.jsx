const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
   export const GnerateCourseLayout_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "generate a course tutorial on following detail  with field course as name,description along with chapter Name,About,Duration:Category:'programming',Topic:'python',Level:'Basic',Duration:1hours,nOOf Chapter:5 ,in json format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"course\": {\n    \"name\": \"Python Fundamentals\",\n    \"description\": \"This course provides a comprehensive introduction to Python programming, covering basic concepts and syntax. Ideal for beginners with no prior programming experience.\",\n    \"category\": \"programming\",\n    \"topic\": \"python\",\n    \"level\": \"Basic\",\n    \"duration\": \"1 hour\",\n    \"numberOfChapters\": 5,\n    \"chapters\": [\n      {\n        \"name\": \"Introduction to Python\",\n        \"about\": \"This chapter introduces you to the Python programming language, its history, and why it's so popular. We'll cover setting up your development environment and writing your first Python program.\",\n          \"duration\": \"10 minutes\"\n      },\n      {\n        \"name\": \"Variables and Data Types\",\n        \"about\": \"Learn about fundamental data types in Python such as integers, floats, strings, and booleans. You'll also learn how to declare and use variables to store data.\",\n         \"duration\": \"15 minutes\"\n      },\n      {\n        \"name\": \"Operators and Expressions\",\n         \"about\": \"This chapter covers arithmetic, comparison, and logical operators in Python. You'll learn how to combine these operators to create expressions and perform calculations.\",\n        \"duration\": \"15 minutes\"\n      },\n      {\n        \"name\": \"Control Flow: Conditional Statements\",\n         \"about\": \"Explore conditional statements such as 'if', 'elif', and 'else' to control the flow of execution in your programs based on different conditions.\",\n           \"duration\": \"15 minutes\"\n      },\n     {\n        \"name\": \"Control Flow: Loops\",\n        \"about\":\"Learn how to create loops to execute repetitive code blocks such as for and while loops.\",\n          \"duration\":\"15 minutes\"\n\n     }\n    ]\n  }\n}\n```\n"},
          ],
        },
      ],
    });
  
    export const GenerateChapterContent = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "explain the concept in Detail on Topic: java, Chapter: Object-Oriented Programming Principles, Variables and data types, in JSON Format with list of array with field as title, explanation on give chapter in detail, Code Example (Code file in <pre code> format) if applicable"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"topic\": \"Java Object-Oriented Programming: Variables and Data Types\",\n  \"chapters\": [\n    {\n      \"title\": \"Introduction to Object-Oriented Programming (OOP)\",\n      \"explanation\": \"Object-Oriented Programming (OOP) is a programming paradigm centered around the concept of 'objects'.  These objects combine data (attributes) and code (methods) that operate on that data. Java is inherently an object-oriented language, meaning most of the code you write revolves around creating and manipulating objects. Key principles of OOP include encapsulation, inheritance, and polymorphism. Understanding these principles is crucial for writing maintainable, reusable, and scalable Java applications.  It moves away from procedural programming, which focuses on a series of instructions, towards modeling real-world entities and their interactions.\",\n      \"code_example\": null\n    },\n    {\n      \"title\": \"Variables: What They Are and Why We Need Them\",\n      \"explanation\": \"Variables are named storage locations in a computer's memory used to hold data. Think of them as containers labeled with names.  They allow us to store and manipulate data within a program. Each variable has a specific *data type*, which determines the kind of data it can hold (e.g., numbers, text, boolean values).  Variables are essential because they allow us to perform calculations, store user input, and make decisions based on data values during program execution.  Without variables, every value would have to be hardcoded, making programs inflexible and difficult to modify.  A variable's value can change during the program's execution, as opposed to a *constant*, whose value remains fixed.\",\n      \"code_example\": null\n    },\n    {\n      \"title\": \"Data Types in Java\",\n      \"explanation\": \"Java is a statically-typed language, meaning that the data type of a variable must be declared before it's used.  This allows the compiler to perform type checking, catching potential errors early in the development process. Java has two main categories of data types: *primitive* and *reference* data types.\",\n      \"subsections\": [\n        {\n          \"title\": \"Primitive Data Types\",\n          \"explanation\": \"Primitive data types are the basic building blocks of data in Java. They store actual values directly in memory. Java defines eight primitive data types:\\n\\n*   **`byte`:**  A 8-bit integer (stores whole numbers from -128 to 127). Used for memory efficiency when the range of values is small.\\n*   **`short`:** A 16-bit integer (stores whole numbers from -32,768 to 32,767). Less commonly used.\\n*   **`int`:** A 32-bit integer (stores whole numbers from -2,147,483,648 to 2,147,483,647).  The most commonly used integer type.\\n*   **`long`:** A 64-bit integer (stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807). Used when `int` is not large enough.\\n*   **`float`:** A 32-bit single-precision floating-point number (stores decimal numbers). Use `f` suffix to denote a float literal (e.g., `3.14f`).\\n*   **`double`:** A 64-bit double-precision floating-point number (stores decimal numbers). Generally preferred over `float` for better precision.\\n*   **`boolean`:** Represents a logical value (either `true` or `false`). Used for conditional statements and logical operations.\\n*   **`char`:** A 16-bit Unicode character (stores a single character, like 'A', 'a', or '5').  Represents characters in various languages.\",\n          \"code_example\": \"<pre>\\npublic class PrimitiveDataTypes {\\n    public static void main(String[] args) {\\n        byte age = 30;\\n        short distance = 1000;\\n        int population = 1000000;\\n        long worldPopulation = 8000000000L; // 'L' suffix for long literal\\n        float pi = 3.14159f; // 'f' suffix for float literal\\n        double accuratePi = 3.14159265359;\\n        boolean isJavaFun = true;\\n        char initial = 'J';\\n\\n        System.out.println(\\\"Age: \\\" + age);\\n        System.out.println(\\\"Distance: \\\" + distance);\\n        System.out.println(\\\"Population: \\\" + population);\\n        System.out.println(\\\"World Population: \\\" + worldPopulation);\\n        System.out.println(\\\"Pi: \\\" + pi);\\n        System.out.println(\\\"Accurate Pi: \\\" + accuratePi);\\n        System.out.println(\\\"Is Java Fun? \\\" + isJavaFun);\\n        System.out.println(\\\"Initial: \\\" + initial);\\n    }\\n}\\n</pre>\"\n        },\n        {\n          \"title\": \"Reference Data Types\",\n          \"explanation\": \"Reference data types store *references* (memory addresses) to objects.  They don't store the actual data directly. This means that multiple variables can refer to the same object.  If one variable changes the object's data, the change is reflected in all variables referencing that object.\\n\\nCommon reference data types include:\\n\\n*   **Classes:** User-defined data types that define the blueprint for objects. (e.g., `String`, `Scanner`, `ArrayList`, custom classes)\\n*   **Interfaces:**  Contracts that specify a set of methods that a class must implement.\\n*   **Arrays:**  Collections of elements of the same data type.\\n*   **Strings:**  Sequences of characters (technically an object of the `String` class).\\n\\nWhen a reference variable doesn't point to any object, it holds the value `null`.\",\n          \"code_example\": \"<pre>\\npublic class ReferenceDataTypes {\\n    public static void main(String[] args) {\\n        String name = \\\"John Doe\\\";\\n        String anotherName = name; // both variables refer to the same String object\\n\\n        System.out.println(\\\"Name: \\\" + name);\\n        System.out.println(\\\"Another Name: \\\" + anotherName);\\n\\n        name = \\\"Jane Doe\\\"; // name now points to a new String object\\n\\n        System.out.println(\\\"Name: \\\" + name); // Output: Jane Doe\\n        System.out.println(\\\"Another Name: \\\" + anotherName); // Output: John Doe (remains unchanged)\\n\\n        //Array Example\\n        int[] numbers = {1, 2, 3, 4, 5};\\n\\n        //Object Example (Assuming a simple class 'Dog' is defined)\\n        Dog myDog = new Dog(\\\"Buddy\\\");\\n        System.out.println(\\\"Dog's name is: \\\" + myDog.getName());\\n    }\\n}\\n\\nclass Dog {\\n    private String name;\\n\\n    public Dog(String name) {\\n        this.name = name;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n}\\n</pre>\"\n        }\n      ]\n    },\n    {\n      \"title\": \"Variable Declaration and Initialization\",\n      \"explanation\": \"Declaring a variable means specifying its data type and name.  Initialization means assigning an initial value to the variable.  You can declare and initialize a variable in a single statement or separately.\\n\\n*   **Declaration:**  `dataType variableName;` (e.g., `int age;`, `String name;`)\\n*   **Initialization:**  `variableName = value;` (e.g., `age = 25;`, `name = \\\"Alice\\\";`)\\n*   **Declaration and Initialization:** `dataType variableName = value;` (e.g., `int age = 25;`, `String name = \\\"Alice\\\";`)\\n\\nIt's good practice to initialize variables when you declare them to avoid unexpected behavior or errors.\",\n      \"code_example\": \"<pre>\\npublic class VariableDeclaration {\\n    public static void main(String[] args) {\\n        // Declare a variable of type int\\n        int age;\\n\\n        // Initialize the variable\\n        age = 30;\\n\\n        // Declare and initialize a variable in one line\\n        String name = \\\"Bob\\\";\\n\\n        System.out.println(\\\"Name: \\\" + name);\\n        System.out.println(\\\"Age: \\\" + age);\\n\\n        // Uninitialized variable - causes a compile-time error if used before initialization\\n        int score;\\n       // System.out.println(\\\"Score: \\\" + score); //This line would cause an error\\n        score = 100; //Now initialized\\n        System.out.println(\\\"Score: \\\" + score);\\n    }\\n}\\n</pre>\"\n    },\n    {\n      \"title\": \"Variable Scope\",\n      \"explanation\": \"Variable scope refers to the region of the program where a variable is accessible (can be used). Java has different levels of scope:\\n\\n*   **Local Variables:** Declared inside a method or block of code. They are only accessible within that method or block. Their lifetime is limited to the execution of the method or block.\\n*   **Instance Variables (Member Variables):** Declared inside a class but outside any method. They belong to an object (instance) of the class.  Each object has its own copy of instance variables.  Their lifetime is tied to the object's lifetime.\\n*   **Static Variables (Class Variables):** Declared inside a class with the `static` keyword. They belong to the class itself, not to any particular object.  There is only one copy of a static variable shared by all objects of the class. Their lifetime is the entire duration of the program's execution.\\n\\nUnderstanding scope is crucial to avoid naming conflicts and to ensure that variables are only accessed where they are intended to be.\",\n      \"code_example\": \"<pre>\\npublic class VariableScope {\\n\\n    // Instance variable (member variable)\\n    String name = \\\"Global Name\\\";\\n\\n    // Static variable (class variable)\\n    static int count = 0;\\n\\n    public void myMethod() {\\n        // Local variable\\n        int x = 10;\\n\\n        System.out.println(\\\"x (local): \\\" + x);\\n        System.out.println(\\\"name (instance): \\\" + name);\\n        System.out.println(\\\"count (static): \\\" + count);\\n        count++; // increment the static count\\n    }\\n\\n    public static void main(String[] args) {\\n        VariableScope obj1 = new VariableScope();\\n        obj1.myMethod(); // x is only accessible inside myMethod\\n        System.out.println(\\\"Object 1 count: \\\" + count);\\n        VariableScope obj2 = new VariableScope();\\n        obj2.myMethod();\\n        System.out.println(\\\"Object 2 count: \\\" + count);\\n    }\\n}\\n</pre>\"\n    },\n    {\n      \"title\": \"Constants\",\n      \"explanation\": \"Constants are variables whose values cannot be changed after they are initialized.  In Java, you declare a constant using the `final` keyword.  Constants are typically written in uppercase with underscores separating words (e.g., `MAX_VALUE`).  They are useful for representing values that should not be modified during the program's execution, such as mathematical constants (e.g., PI), configuration settings, or maximum values. Using constants improves code readability and prevents accidental modification of important values.\",\n      \"code_example\": \"<pre>\\npublic class Constants {\\n    public static void main(String[] args) {\\n        final double PI = 3.14159;\\n        final int MAX_SIZE = 100;\\n\\n        System.out.println(\\\"PI: \\\" + PI);\\n        System.out.println(\\\"MAX_SIZE: \\\" + MAX_SIZE);\\n\\n        // PI = 3.14; // This line would cause a compile-time error (cannot reassign a final variable)\\n    }\\n}\\n</pre>\"\n    },\n        {\n      \"title\": \"Type Conversion (Casting)\",\n      \"explanation\": \"Type conversion, also known as casting, is the process of converting a value from one data type to another.  Java supports two types of casting:\\n\\n*   **Widening Casting (Implicit):** Converting from a smaller data type to a larger data type. This is done automatically by Java, as there is no risk of data loss.  For example, converting an `int` to a `double`.\\n*   **Narrowing Casting (Explicit):** Converting from a larger data type to a smaller data type. This requires explicit casting using parentheses, as there is a risk of data loss.  For example, converting a `double` to an `int` (the decimal part will be truncated).\",\n      \"code_example\": \"<pre>\\npublic class TypeConversion {\\n    public static void main(String[] args) {\\n        // Widening Casting (Implicit)\\n        int intValue = 10;\\n        double doubleValue = intValue; // int is automatically converted to double\\n        System.out.println(\\\"intValue: \\\" + intValue); // Output: 10\\n        System.out.println(\\\"doubleValue: \\\" + doubleValue); // Output: 10.0\\n\\n        // Narrowing Casting (Explicit)\\n        double anotherDouble = 9.99;\\n        int anotherInt = (int) anotherDouble; // double is explicitly cast to int (truncation)\\n        System.out.println(\\\"anotherDouble: \\\" + anotherDouble); // Output: 9.99\\n        System.out.println(\\\"anotherInt: \\\" + anotherInt); // Output: 9 (decimal part is lost)\\n\\n         // Casting from long to short (can lead to data loss if the long is too large)\\n        long bigNumber = 130; //fits inside short, but example provided. Max short is 32767\\n        short smallNumber = (short) bigNumber;\\n        System.out.println(\\\"bigNumber: \\\" + bigNumber);\\n        System.out.println(\\\"smallNumber: \\\" + smallNumber);\\n\\n    }\\n}\\n</pre>\"\n    }\n\n  ]\n}\n```"},
          ],
        },
      ],
    });
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());

  
